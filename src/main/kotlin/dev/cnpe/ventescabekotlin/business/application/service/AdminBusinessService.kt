package dev.cnpe.ventescabekotlin.business.application.service

import dev.cnpe.ventescabekotlin.business.application.dto.request.AdminCreateBusinessRequest
import dev.cnpe.ventescabekotlin.business.application.dto.response.BusinessDetailedResponse
import dev.cnpe.ventescabekotlin.business.application.exception.BusinessErrorCode
import dev.cnpe.ventescabekotlin.business.application.mapper.BusinessMapper
import dev.cnpe.ventescabekotlin.business.domain.model.BusinessBranch
import dev.cnpe.ventescabekotlin.business.domain.model.BusinessUser
import dev.cnpe.ventescabekotlin.business.infrastructure.persistence.BusinessRepository
import dev.cnpe.ventescabekotlin.business.infrastructure.persistence.BusinessUserRepository
import dev.cnpe.ventescabekotlin.security.ports.IdentityProviderPort
import dev.cnpe.ventescabekotlin.security.ports.dto.NewUserData
import dev.cnpe.ventescabekotlin.shared.application.exception.DomainException
import dev.cnpe.ventescabekotlin.shared.application.exception.createDuplicatedResourceException
import dev.cnpe.ventescabekotlin.shared.domain.vo.Address
import dev.cnpe.ventescabekotlin.tenant.service.TenantManagementService
import io.github.oshai.kotlinlogging.KotlinLogging
import org.springframework.beans.factory.annotation.Qualifier
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Propagation
import org.springframework.transaction.annotation.Transactional
import org.springframework.transaction.support.TransactionTemplate

private val log = KotlinLogging.logger {}

@Service
class AdminBusinessService(
    private val idpPort: IdentityProviderPort,
    private val tenantManagementService: TenantManagementService,
    private val businessFactory: BusinessFactory,
    private val businessRepository: BusinessRepository,
    private val businessUserRepository: BusinessUserRepository,
    private val businessMapper: BusinessMapper,

    @Qualifier("masterTransactionTemplate")
    private val masterTransactionTemplate: TransactionTemplate // TODO: Define masterTransactionTemplate bean
) {

    companion object {
        private const val ROLE_BUSINESS_ADMIN = "BUSINESS_ADMIN"
    }

    /**
     * Registers a new business and its initial administrator user.
     * Orchestrated by a Superuser. Involves IdP interaction, tenant DB creation,
     * and master DB record creation.
     *
     * @param request DTO containing all necessary initial data.
     * @return Detailed DTO of the newly created and configured business.
     * @throws DomainException if validation fails (e.g., duplicate email/business name).
     * @throws IdpUserCreationException if user creation in IdP fails.
     * @throws TenantCreationException if tenant DB creation or migration fails.
     */
    @Transactional(propagation = Propagation.NEVER)
    fun registerNewBusinessAndAdmin(request: AdminCreateBusinessRequest): BusinessDetailedResponse {
        log.warn { "⚠️ Initiating NEW BUSINESS registration by Superuser for: ${request.businessName} (Admin Email: ${request.adminUserEmail})" }

        masterTransactionTemplate.execute {
            validateAdminCreateRequest(request)
        }

        val newAdminUserData = NewUserData(
            email = request.adminUserEmail,
            firstName = null,
            lastName = null,
            initialPassword = "changeme" // Autogenerated?
        )

        val idpAttributes = mapOf<String, String>()
        val idpUser = idpPort.createUser(newAdminUserData, setOf(ROLE_BUSINESS_ADMIN), idpAttributes)
        log.info { "IdP User created successfully: ${idpUser.email} (ID: ${idpUser.id})" }

        val (tenantId, businessShell) = businessFactory
            .createNewBusinessShell(idpUser.id, request.businessName)
        log.info { "Tenant infrastructure created: ${tenantId.value}" }

        val savedBusiness = masterTransactionTemplate.execute {
            businessShell.details = businessFactory.buildBusinessDetails(request)
            businessShell.contactInfo = businessFactory.buildBusinessContactInfo(request)
            businessShell.configuration = businessFactory.buildBusinessConfig(request)

            val mainBranchAddress = Address.buildAddress(
                street = request.mainBranchStreet,
                city = request.mainBranchCity,
                country = request.mainBranchCountry,
                zipCode = request.mainBranchZipCode
            ) ?: Address.empty()

            val mainBranch = BusinessBranch(
                business = businessShell,
                branchName = request.mainBranchName ?: "PLACEHOLDER", //TODO: USE MESSAGE SOURCE
                address = mainBranchAddress,
                branchContactNumber = request.contactPhone,
                isMainBranch = true,
                branchManagerId = idpUser.id
            )

            businessShell.addBranch(mainBranch)
            val saved = businessRepository.save(businessShell)
            log.info { "Business entity saved to master DB. ID: ${saved.id}, Tenant: ${saved.tenantId.value}" }

            val businessUserLink = BusinessUser.createLink(idpUser.id, request.adminUserEmail)
            businessUserLink.business = saved
            businessUserRepository.save(businessUserLink)
            log.info { "BusinessUser link saved for IdP User ${idpUser.id} to Business ${saved.id}" }
            saved
        } ?: throw IllegalStateException("Failed to save business entity within transaction.")

        log.info { "✅ Successfully registered business '${savedBusiness.details.businessName}' (ID: ${savedBusiness.id}, Tenant: ${savedBusiness.tenantId.value})" }

        return businessMapper.toDetailedDto(savedBusiness)
    }

    // needs to run within a master transaction
    private fun validateAdminCreateRequest(request: AdminCreateBusinessRequest) {
        log.debug { "Validating AdminCreateBusinessRequest..." }

        // Check 1: Does business name already exist?
        if (businessRepository.existsByDetails_BusinessName(request.businessName)) {
            throw createDuplicatedResourceException("businessName", request.businessName)
        }

        // Check 2: Does admin user email already exist in IdP?
        idpPort.findUserByEmail(request.adminUserEmail)?.let { existingUser ->
            log.warn { "Admin user email ${request.adminUserEmail} already exists in IdP (ID: ${existingUser.id}). Cannot create new business with this admin." }
            throw createDuplicatedResourceException("adminUserEmail", request.adminUserEmail)
        }

        // Check 3: Does admin user email already linked to another business?
        if (businessUserRepository.findByUserEmail(request.adminUserEmail) != null) {
            throw DomainException(
                BusinessErrorCode.USER_ALREADY_LINKED,
                mapOf("field" to "adminUserEmail", "value" to request.adminUserEmail),
            )
        }

        // TODO: Add validation for Currency Code using CurrencyRepository?
        log.debug { "AdminCreateBusinessRequest validation passed." }
    }
}